[gd_scene load_steps=30 format=2]

[ext_resource path="res://images/ui/textbox.png" type="Texture" id=1]
[ext_resource path="res://fonts/montreal/Montreal-Regular.ttf" type="DynamicFontData" id=2]
[ext_resource path="res://fonts/montreal/Montreal-Bold.ttf" type="DynamicFontData" id=3]
[ext_resource path="res://images/ui/arrow.png" type="Texture" id=4]
[ext_resource path="res://audio/sfx/shutter.wav" type="AudioStream" id=5]
[ext_resource path="res://images/ui/nameplate.png" type="Texture" id=6]
[ext_resource path="res://fonts/droid-sans/DroidSans.ttf" type="DynamicFontData" id=7]

[sub_resource type="GDScript" id=1]
script/source = "extends Control

var message_display
export var message_speed = 0.05

var timer
var typing_finsihed = true
var tween
var tweening_finished = true
var visibility
var state = 'disabled' # 'disabled', 'typing', 'waiting_input', 'standby'

export var click_sound = true

signal finished_typing
signal finished_tweening
signal clicked
signal next

func _ready():
	self.timer = $Timer
	self.tween = $Tween
	
	self.message_display = $ClickableArea/Message
	self.message_display.text = \"\"
	
	self.visibility = true if (self.modulate.a == 1) else false
	self.state = 'standby'

func show_text(text, options: Dictionary = {}):
	self.state = 'typing'
	self.message_display.text = text
	self.message_display.visible_characters = 0
	self.typing_finsihed = false
	$ClickableArea/NextCaret.visible = false
	if (options.has('nameplate')):
		var hue = 0
		if (options['nameplate'].has('hue')):
			hue = options['nameplate']['hue']
		self._show_nameplate(options['nameplate']['name'], hue)
	else:
		self._hide_nameplate()
	timer.start(self.message_speed)

func _type_text_character():
	self.message_display.visible_characters += 1
	if (self.message_display.visible_characters >= self.message_display.text.length()):
		self._end_typing()

func _show_nameplate(name, hue: float = 0):
	$ClickableArea/Nameplate/NameText.text = name
	$ClickableArea/Nameplate.get_material().set_shader_param('shift_amount', hue)
	$ClickableArea/Nameplate.visible = true

func _hide_nameplate():
	$ClickableArea/Nameplate.visible = false

func _skip_typing():
	self.timer.stop()
	self.message_display.visible_characters = self.message_display.text.length()
	self._end_typing()

func _end_typing():
	self.timer.stop()
	self.typing_finsihed = true
	self.state = 'waiting_input'
	$ClickableArea/NextCaret.visible = true
	emit_signal('finished_typing')

func hide(animate: bool = true):
	self.toggle_visibility(false, animate)

func show(animate: bool = true):
	self.toggle_visibility(true, animate)

func toggle_visibility(show: bool, animate: bool = true):
	$ClickableArea/NextCaret.visible = false
	if (animate):
		self.tween.interpolate_property(self, \"modulate:a\", (0 if show else 1), (1 if show else 0), 1, Tween.TRANS_LINEAR, Tween.EASE_IN)
		self.tweening_finished = false
		self.tween.start()
	else:
		self.modulate.a = (1 if show else 0)
		self._end_tween()

func _skip_tween():
	self.tween.playback_speed = 10.0

func _end_tween():
	self.tween.playback_speed = 1.0
	self.tween.remove_all()
	self.tweening_finished = true
	if self.modulate.a == 1: self.state = 'standby'; else: self.state = 'disabled'
	emit_signal('finished_tweening')

func _advance():
	if self.typing_finsihed && self.tweening_finished:
		$ClickableArea/NextCaret.visible = false
		self._play_click_sfx()
		emit_signal('next')
		self.state = 'standby'
	else:
		if !self.typing_finsihed:
			self._skip_typing()
		if !self.tweening_finished:
			self._skip_tween()

func _play_click_sfx():
	if (!self.click_sound): return
	if (self.state != 'waiting_input'): return
	$ClickSound.play()

func get_nameplate_hue(name):
	var hue = 0
	match (name):
		_: hue = 0
	return hue

func _on_click(viewport, event, shape_idx):
	if (event is InputEventMouseButton):
		if (event.button_index == BUTTON_LEFT and event.pressed):
			emit_signal('clicked')
			self._advance()

func _input(event):
	if event.is_action_pressed(\"ui_accept\"):
		emit_signal('clicked')
		self._advance()

func _on_tween_all_completed():
	self._end_tween() # same procedure anyway

func _on_tween_started(object, key):
	if (object == self && key == ':modulate:a'):
		if (self.visibility == false):
			self.message_display.text = \"\"
			self.message_display.visible_characters = 0

func _on_tween_completed(object, key):
	if (object == self && key == ':modulate:a'):
		self.visibility = true if (self.modulate.a == 1) else false
"

[sub_resource type="Shader" id=21]
code = "shader_type canvas_item;

uniform float shift_amount : hint_range(0, 1);

vec3 rgb2hsb(vec3 c) {
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(c.bg, K.wz),
                vec4(c.gb, K.xy),
                step(c.b, c.g));
    vec4 q = mix(vec4(p.xyw, c.r),
                vec4(c.r, p.yzx),
                step(p.x, c.r));
    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)),
                d / (q.x + e),
                q.x);
}

vec3 hsb2rgb(vec3 c) {
    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),
                    6.0)-3.0)-1.0,
                    0.0,
                    1.0 );
    rgb = rgb*rgb*(3.0-2.0*rgb);
    return c.z * mix(vec3(1.0), rgb, c.y);
}

void fragment() {
	// Get color from the sprite texture at the current pixel we are rendering
    vec4 original_color = texture(TEXTURE, UV);
    vec3 col = original_color.rgb;
    // If not greyscale
    if(col[0] != col[1] || col[1] != col[2]) {
        vec3 hsb = rgb2hsb(col);
        // Shift the color by shift_amount, but rolling over the value goes over 1
        hsb.x = mod(hsb.x + shift_amount, 1.0);
        col = hsb2rgb(hsb);
    }
    COLOR = vec4(col.rgb, original_color.a);
}"

[sub_resource type="ShaderMaterial" id=22]
shader = SubResource( 21 )
shader_param/shift_amount = 0.0

[sub_resource type="DynamicFont" id=2]
size = 36
use_mipmaps = true
use_filter = true
font_data = ExtResource( 3 )

[sub_resource type="DynamicFont" id=3]
size = 36
use_mipmaps = true
use_filter = true
font_data = ExtResource( 2 )
fallback/0 = ExtResource( 7 )

[sub_resource type="AtlasTexture" id=4]
flags = 4
atlas = ExtResource( 4 )
region = Rect2( 0, 0, 256, 256 )

[sub_resource type="AtlasTexture" id=5]
flags = 4
atlas = ExtResource( 4 )
region = Rect2( 0, 256, 256, 256 )

[sub_resource type="AtlasTexture" id=6]
flags = 4
atlas = ExtResource( 4 )
region = Rect2( 0, 512, 256, 256 )

[sub_resource type="AtlasTexture" id=7]
flags = 4
atlas = ExtResource( 4 )
region = Rect2( 0, 768, 256, 256 )

[sub_resource type="AtlasTexture" id=8]
flags = 4
atlas = ExtResource( 4 )
region = Rect2( 0, 1024, 256, 256 )

[sub_resource type="AtlasTexture" id=9]
flags = 4
atlas = ExtResource( 4 )
region = Rect2( 256, 0, 256, 256 )

[sub_resource type="AtlasTexture" id=10]
flags = 4
atlas = ExtResource( 4 )
region = Rect2( 256, 256, 256, 256 )

[sub_resource type="AtlasTexture" id=11]
flags = 4
atlas = ExtResource( 4 )
region = Rect2( 256, 512, 256, 256 )

[sub_resource type="AtlasTexture" id=12]
flags = 4
atlas = ExtResource( 4 )
region = Rect2( 256, 768, 256, 256 )

[sub_resource type="AtlasTexture" id=13]
flags = 4
atlas = ExtResource( 4 )
region = Rect2( 256, 1024, 256, 256 )

[sub_resource type="AtlasTexture" id=14]
flags = 4
atlas = ExtResource( 4 )
region = Rect2( 512, 0, 256, 256 )

[sub_resource type="AtlasTexture" id=15]
flags = 4
atlas = ExtResource( 4 )
region = Rect2( 512, 256, 256, 256 )

[sub_resource type="AtlasTexture" id=16]
flags = 4
atlas = ExtResource( 4 )
region = Rect2( 512, 512, 256, 256 )

[sub_resource type="AtlasTexture" id=17]
flags = 4
atlas = ExtResource( 4 )
region = Rect2( 512, 768, 256, 256 )

[sub_resource type="AtlasTexture" id=18]
flags = 4
atlas = ExtResource( 4 )
region = Rect2( 512, 1024, 256, 256 )

[sub_resource type="SpriteFrames" id=19]
animations = [ {
"frames": [ SubResource( 4 ), SubResource( 5 ), SubResource( 6 ), SubResource( 7 ), SubResource( 8 ), SubResource( 9 ), SubResource( 10 ), SubResource( 11 ), SubResource( 12 ), SubResource( 13 ), SubResource( 14 ), SubResource( 15 ), SubResource( 16 ), SubResource( 17 ), SubResource( 18 ) ],
"loop": true,
"name": "default",
"speed": 10.0
} ]

[sub_resource type="RectangleShape2D" id=20]
extents = Vector2( 960, 147 )

[node name="MessageBox" type="Control"]
mouse_filter = 2
script = SubResource( 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ClickableArea" type="Area2D" parent="."]
position = Vector2( 960, 932 )
gravity_vec = Vector2( 0, 0 )

[node name="Background" type="Sprite" parent="ClickableArea"]
texture = ExtResource( 1 )
__meta__ = {
"_edit_lock_": true
}

[node name="Nameplate" type="Sprite" parent="ClickableArea"]
visible = false
material = SubResource( 22 )
position = Vector2( -485.87, -116.327 )
texture = ExtResource( 6 )
__meta__ = {
"_edit_group_": true
}

[node name="NameText" type="RichTextLabel" parent="ClickableArea/Nameplate"]
margin_left = -207.0
margin_top = -23.0
margin_right = 249.0
margin_bottom = 29.0
mouse_filter = 2
custom_fonts/bold_font = SubResource( 2 )
custom_fonts/normal_font = SubResource( 3 )
custom_colors/default_color = Color( 0, 0, 0, 1 )
custom_colors/font_color_shadow = Color( 0.141176, 0.141176, 0.141176, 0.32549 )
custom_constants/shadow_offset_x = 3
custom_constants/shadow_offset_y = 3
bbcode_enabled = true
meta_underlined = false
scroll_active = false
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Message" type="RichTextLabel" parent="ClickableArea"]
margin_left = -705.0
margin_top = -74.0
margin_right = 704.0
margin_bottom = 108.0
mouse_filter = 2
custom_fonts/bold_font = SubResource( 2 )
custom_fonts/normal_font = SubResource( 3 )
custom_colors/default_color = Color( 0, 0, 0, 1 )
custom_colors/font_color_shadow = Color( 0.141176, 0.141176, 0.141176, 0.32549 )
custom_constants/shadow_offset_x = 3
custom_constants/shadow_offset_y = 3
bbcode_enabled = true
meta_underlined = false
scroll_active = false
__meta__ = {
"_edit_use_anchors_": false
}

[node name="NextCaret" type="AnimatedSprite" parent="ClickableArea"]
position = Vector2( 728.382, 68.6981 )
scale = Vector2( 0.186289, 0.186289 )
frames = SubResource( 19 )
frame = 12
playing = true
__meta__ = {
"_edit_lock_": true
}

[node name="CollisionShape2D" type="CollisionShape2D" parent="ClickableArea"]
visible = false
shape = SubResource( 20 )
one_way_collision = true
__meta__ = {
"_edit_lock_": true
}

[node name="Tween" type="Tween" parent="."]

[node name="Timer" type="Timer" parent="."]

[node name="ClickSound" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 5 )
bus = "UI SFX"
[connection signal="input_event" from="ClickableArea" to="." method="_on_click"]
[connection signal="tween_all_completed" from="Tween" to="." method="_on_tween_all_completed"]
[connection signal="tween_completed" from="Tween" to="." method="_on_tween_completed"]
[connection signal="tween_started" from="Tween" to="." method="_on_tween_started"]
[connection signal="timeout" from="Timer" to="." method="_type_text_character"]
