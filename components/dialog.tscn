[gd_scene load_steps=30 format=2]

[ext_resource path="res://images/ui/textbox.png" type="Texture" id=1]
[ext_resource path="res://fonts/montreal/Montreal-Regular.ttf" type="DynamicFontData" id=2]
[ext_resource path="res://fonts/montreal/Montreal-Bold.ttf" type="DynamicFontData" id=3]
[ext_resource path="res://images/ui/arrow.png" type="Texture" id=4]
[ext_resource path="res://audio/sfx/shutter.wav" type="AudioStream" id=5]
[ext_resource path="res://images/ui/nameplate.png" type="Texture" id=6]
[ext_resource path="res://fonts/droid-sans/DroidSans.ttf" type="DynamicFontData" id=7]
[ext_resource path="res://shaders/hue_shift.shader" type="Shader" id=8]

[sub_resource type="GDScript" id=1]
script/source = "extends Control

export var message_speed = 0.02
var temporary_message_speed = null

var message_length
var timer
var typing_finsihed = true
var tween
var tweening_finished = true
var visibility
var state = 'disabled' # 'disabled', 'typing', 'waiting_input', 'standby'
var tags = []
var instructions = {}

export var click_sound = true

signal finished_typing
signal finished_tweening
signal clicked
signal next
signal hover_on
signal hover_off

func _ready():
	$ClickableArea/Message.bbcode_text = \"\"

	self.visibility = true if (self.modulate.a == 1) else false
	self.state = 'standby'

func show_text(text, options: Dictionary = {}):
	self.state = 'typing'
	
	# check for message tags
	self.tags = []
	var tag_scan = true
	while (tag_scan):
		# continue text or fresh text
		if (text.begins_with('_')):
			text = text.substr(1)
			self.tags.push_back(\"continue\")
		elif (text.ends_with('>>')):
			text = text.substr(0, text.length() - 2)
			self.tags.push_back(\"no_confirmation\")
		else:
			tag_scan = false
	
	# check for message instructions
	self.instructions = {}
	var instruction_scan = true
	var push_by = 0
	if (\"continue\" in self.tags):
		push_by = (self.get_bbcodeless_text($ClickableArea/Message.bbcode_text)).length()
	while (instruction_scan):
		var opening_bracket_position = text.find('{')
		if (opening_bracket_position != -1):
			
			# count all preceeding bbcodes
			var scan_index = 0
			var bbcodes = [];
			while (scan_index <= opening_bracket_position):
				var s_pos = text.find('[', scan_index)
				if (s_pos == -1 || s_pos > opening_bracket_position):
					break
				else:
					var e_pos = text.find(']', scan_index + 1)
					if (e_pos == -1):
						break
					else:
						bbcodes.push_back([s_pos, e_pos])
						scan_index = e_pos
			
			var closing_bracket_position = text.find('}')
			if (closing_bracket_position != -1):
				var instruction = text.substr(opening_bracket_position, closing_bracket_position - opening_bracket_position + 1)
				var instruction_index = opening_bracket_position;
				for i in bbcodes:
					instruction_index -= ((i[1] - i[0]) + 1)
				self.instructions[push_by + instruction_index] = instruction.substr(1, instruction.length() - 2)
				text = text.replace(instruction, \"\")
			else:
				instruction_scan = false
		else:
			instruction_scan = false
		
	if (\"continue\" in self.tags):
		$ClickableArea/Message.visible_characters = (self.get_bbcodeless_text($ClickableArea/Message.bbcode_text)).length()
		$ClickableArea/Message.bbcode_text = $ClickableArea/Message.bbcode_text + text
	else:
		$ClickableArea/Message.bbcode_text = text
		$ClickableArea/Message.visible_characters = 0
	self.message_length = (self.get_bbcodeless_text($ClickableArea/Message.bbcode_text)).length()
	self.typing_finsihed = false
	$ClickableArea/NextCaret.visible = false
	if (options.has('nameplate')):
		var hue = 0
		if (options['nameplate'].has('hue')):
			hue = options['nameplate']['hue']
		self._show_nameplate(options['nameplate']['name'], hue)
	else:
		self._hide_nameplate()
	
	self.go_over_instructions()
	if (self.temporary_message_speed):
		$Timer.start(self.temporary_message_speed)
		self.temporary_message_speed = null
	else:
		$Timer.start(self.message_speed)

func get_bbcodeless_text(text):
	if !(text):
		return text
	var do = true
	while (do):
		var s_pos = text.find('[')
		if (s_pos == -1):
			do = false
		else:
			var e_pos = text.find(']')
			text.erase(s_pos, (e_pos - s_pos) + 1)
	return text

func go_over_instructions():
	if ($ClickableArea/Message.visible_characters in self.instructions):
		var instruction = self.instructions[$ClickableArea/Message.visible_characters]
		if (instruction.begins_with(\"w\")):
			$Timer.stop()
			var wait_timer = Timer.new()
			wait_timer.one_shot = true
			wait_timer.wait_time = float(instruction.substr(1))
			wait_timer.connect(\"timeout\", self, \"_intext_timer_timeout\", [wait_timer])
			$Timer.add_child(wait_timer)
			wait_timer.start()
		elif (instruction.begins_with(\"s\")):
			if ($ClickableArea/Message.visible_characters > 0):
				$Timer.wait_time = float(instruction.substr(1))
			else:
				self.temporary_message_speed = float(instruction.substr(1))

func _type_text_character():
	$ClickableArea/Message.visible_characters += 1
	if ($ClickableArea/Message.visible_characters >= self.message_length):
		self._end_typing()
	else:
		self.go_over_instructions()

func _intext_timer_timeout(itself):
	$Timer.remove_child(itself)
	$Timer.start()

func _show_nameplate(name, hue: float = 0):
	$ClickableArea/Nameplate/NameText.bbcode_text = \"[center]\" + name + \"[/center]\"
	$ClickableArea/Nameplate.get_material().set_shader_param('shift_amount', hue)
	$ClickableArea/Nameplate.visible = true

func _hide_nameplate():
	$ClickableArea/Nameplate.visible = false

func _skip_typing():
	$Timer.stop()
	$ClickableArea/Message.visible_characters = $ClickableArea/Message.bbcode_text.length()
	self._end_typing()

func _end_typing():
	$Timer.stop()
	for i in $Timer.get_children():
		$Timer.remove_child(i)
	self.typing_finsihed = true
	self.state = 'waiting_input'
	if !(\"no_confirmation\" in self.tags):
		$ClickableArea/NextCaret.visible = true
	emit_signal('finished_typing', self.tags)

func hide(animate: bool = true):
	self.toggle_visibility(false, animate)

func show(animate: bool = true):
	self.toggle_visibility(true, animate)

func toggle_visibility(show: bool, animate: bool = true):
	self._hide_nameplate()
	$ClickableArea/NextCaret.visible = false
	if show: self.visible = true
	else: $ClickableArea/Message.text = \"\"
	if (animate):
		$Tween.interpolate_property(self, \"modulate:a\", (0 if show else 1), (1 if show else 0), 0.5, Tween.TRANS_LINEAR, Tween.EASE_IN_OUT)
		$Tween.interpolate_property($ClickableArea/Background, \"position:y\", (670 if show else 410), (410 if show else 670), 0.5, Tween.TRANS_LINEAR, Tween.EASE_IN_OUT)
		self.tweening_finished = false
		$Tween.start()
	else:
		self.modulate.a = (1 if show else 0)
		$ClickableArea/Background.position.y = (410 if show else 670)
		self._end_tween()

func _skip_tween():
	$Tween.playback_speed = 10.0

func _end_tween():
	$Tween.playback_speed = 1.0
	$Tween.remove_all()
	self.tweening_finished = true
	if self.modulate.a == 1: self.state = 'standby'; else: self.state = 'disabled'
	if self.modulate.a == 0: self.visible = false
	emit_signal('finished_tweening')

func _advance():
	if self.typing_finsihed && self.tweening_finished:
		$ClickableArea/NextCaret.visible = false
		self._play_click_sfx()
		emit_signal('next')
		self.state = 'standby'
	else:
		if !self.typing_finsihed:
			self._skip_typing()
		if !self.tweening_finished:
			self._skip_tween()

func _play_click_sfx():
	if (!self.click_sound): return
	if (self.state != 'waiting_input'): return
	$ClickSound.play()

func get_nameplate_hue(name):
	var hue = 0
	match (name):
		\"Yoshiko\": hue = 0.9
		\"Dia\": hue = 0.3
		_: hue = 0
	return hue

func _on_click(viewport, event, shape_idx):
	if (event is InputEventMouseButton):
		if (event.button_index == BUTTON_LEFT and event.pressed):
			emit_signal('clicked')
			self._advance()

func _input(event):
	if event.is_action_pressed(\"ui_accept\"):
		emit_signal('clicked')
		self._advance()

func _on_tween_all_completed():
	self._end_tween() # same procedure anyway

func _on_tween_started(object, key):
	if (object == self && key == ':modulate:a'):
		if (self.visibility == false):
			$ClickableArea/Message.bbcode_text = \"\"
			$ClickableArea/Message.visible_characters = 0

func _on_tween_completed(object, key):
	if (object == self && key == ':modulate:a'):
		self.visibility = true if (self.modulate.a == 1) else false


func _on_ClickableArea_mouse_entered(): emit_signal('hover_on')
func _on_ClickableArea_mouse_exited(): emit_signal('hover_off')
"

[sub_resource type="ShaderMaterial" id=2]
shader = ExtResource( 8 )
shader_param/shift_amount = 0.0

[sub_resource type="DynamicFont" id=3]
size = 36
use_mipmaps = true
use_filter = true
font_data = ExtResource( 3 )

[sub_resource type="DynamicFont" id=4]
size = 36
use_mipmaps = true
use_filter = true
font_data = ExtResource( 2 )
fallback/0 = ExtResource( 7 )

[sub_resource type="AtlasTexture" id=5]
flags = 4
atlas = ExtResource( 4 )
region = Rect2( 0, 0, 256, 256 )

[sub_resource type="AtlasTexture" id=6]
flags = 4
atlas = ExtResource( 4 )
region = Rect2( 0, 256, 256, 256 )

[sub_resource type="AtlasTexture" id=7]
flags = 4
atlas = ExtResource( 4 )
region = Rect2( 0, 512, 256, 256 )

[sub_resource type="AtlasTexture" id=8]
flags = 4
atlas = ExtResource( 4 )
region = Rect2( 0, 768, 256, 256 )

[sub_resource type="AtlasTexture" id=9]
flags = 4
atlas = ExtResource( 4 )
region = Rect2( 0, 1024, 256, 256 )

[sub_resource type="AtlasTexture" id=10]
flags = 4
atlas = ExtResource( 4 )
region = Rect2( 256, 0, 256, 256 )

[sub_resource type="AtlasTexture" id=11]
flags = 4
atlas = ExtResource( 4 )
region = Rect2( 256, 256, 256, 256 )

[sub_resource type="AtlasTexture" id=12]
flags = 4
atlas = ExtResource( 4 )
region = Rect2( 256, 512, 256, 256 )

[sub_resource type="AtlasTexture" id=13]
flags = 4
atlas = ExtResource( 4 )
region = Rect2( 256, 768, 256, 256 )

[sub_resource type="AtlasTexture" id=14]
flags = 4
atlas = ExtResource( 4 )
region = Rect2( 256, 1024, 256, 256 )

[sub_resource type="AtlasTexture" id=15]
flags = 4
atlas = ExtResource( 4 )
region = Rect2( 512, 0, 256, 256 )

[sub_resource type="AtlasTexture" id=16]
flags = 4
atlas = ExtResource( 4 )
region = Rect2( 512, 256, 256, 256 )

[sub_resource type="AtlasTexture" id=17]
flags = 4
atlas = ExtResource( 4 )
region = Rect2( 512, 512, 256, 256 )

[sub_resource type="AtlasTexture" id=18]
flags = 4
atlas = ExtResource( 4 )
region = Rect2( 512, 768, 256, 256 )

[sub_resource type="AtlasTexture" id=19]
flags = 4
atlas = ExtResource( 4 )
region = Rect2( 512, 1024, 256, 256 )

[sub_resource type="SpriteFrames" id=20]
animations = [ {
"frames": [ SubResource( 5 ), SubResource( 6 ), SubResource( 7 ), SubResource( 8 ), SubResource( 9 ), SubResource( 10 ), SubResource( 11 ), SubResource( 12 ), SubResource( 13 ), SubResource( 14 ), SubResource( 15 ), SubResource( 16 ), SubResource( 17 ), SubResource( 18 ), SubResource( 19 ) ],
"loop": true,
"name": "default",
"speed": 10.0
} ]

[sub_resource type="RectangleShape2D" id=21]
extents = Vector2( 960.183, 130 )

[node name="MessageBox" type="Control"]
mouse_filter = 2
script = SubResource( 1 )
__meta__ = {
"_edit_use_anchors_": false
}
message_speed = 0.04

[node name="ClickableArea" type="Area2D" parent="."]
position = Vector2( 960, 540 )
gravity_vec = Vector2( 0, 0 )
__meta__ = {
"_edit_lock_": true
}

[node name="Background" type="Sprite" parent="ClickableArea"]
self_modulate = Color( 1, 1, 1, 0.784314 )
position = Vector2( 0, 670 )
texture = ExtResource( 1 )

[node name="Nameplate" type="Sprite" parent="ClickableArea"]
self_modulate = Color( 1, 1, 1, 0.784314 )
material = SubResource( 2 )
position = Vector2( -960, 219.388 )
texture = ExtResource( 6 )
centered = false

[node name="NameText" type="RichTextLabel" parent="ClickableArea/Nameplate"]
margin_left = 235.025
margin_top = 5.0
margin_right = 426.025
margin_bottom = 57.0
mouse_filter = 2
custom_fonts/bold_font = SubResource( 3 )
custom_fonts/normal_font = SubResource( 4 )
custom_colors/default_color = Color( 1, 1, 1, 1 )
custom_colors/font_color_shadow = Color( 0.101961, 0.0705882, 0.345098, 0.447059 )
custom_constants/shadow_offset_x = 3
custom_constants/shadow_offset_y = 3
bbcode_enabled = true
meta_underlined = false
scroll_active = false
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Message" type="RichTextLabel" parent="ClickableArea"]
margin_left = -705.0
margin_top = 318.0
margin_right = 704.0
margin_bottom = 500.0
mouse_filter = 2
custom_fonts/bold_font = SubResource( 3 )
custom_fonts/normal_font = SubResource( 4 )
custom_colors/default_color = Color( 1, 1, 1, 1 )
custom_colors/font_color_shadow = Color( 0.101961, 0.0705882, 0.345098, 0.447059 )
custom_constants/shadow_offset_x = 3
custom_constants/shadow_offset_y = 3
bbcode_enabled = true
meta_underlined = false
scroll_active = false
__meta__ = {
"_edit_use_anchors_": false
}

[node name="NextCaret" type="AnimatedSprite" parent="ClickableArea"]
position = Vector2( 728.382, 460 )
scale = Vector2( 0.186289, 0.186289 )
frames = SubResource( 20 )
playing = true
__meta__ = {
"_edit_lock_": true
}

[node name="CollisionShape2D" type="CollisionShape2D" parent="ClickableArea"]
position = Vector2( 0, 410 )
shape = SubResource( 21 )
one_way_collision = true

[node name="Node2D" type="Node2D" parent="ClickableArea"]

[node name="Tween" type="Tween" parent="."]

[node name="Timer" type="Timer" parent="."]

[node name="ClickSound" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 5 )
[connection signal="input_event" from="ClickableArea" to="." method="_on_click"]
[connection signal="mouse_entered" from="ClickableArea" to="." method="_on_ClickableArea_mouse_entered"]
[connection signal="mouse_exited" from="ClickableArea" to="." method="_on_ClickableArea_mouse_exited"]
[connection signal="tween_all_completed" from="Tween" to="." method="_on_tween_all_completed"]
[connection signal="tween_completed" from="Tween" to="." method="_on_tween_completed"]
[connection signal="tween_started" from="Tween" to="." method="_on_tween_started"]
[connection signal="timeout" from="Timer" to="." method="_type_text_character"]
