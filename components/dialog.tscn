[gd_scene load_steps=28 format=2]

[ext_resource path="res://fonts/montreal/Montreal-Regular.ttf" type="DynamicFontData" id=2]
[ext_resource path="res://fonts/montreal/Montreal-Bold.ttf" type="DynamicFontData" id=3]
[ext_resource path="res://images/ui/arrow.png" type="Texture" id=4]
[ext_resource path="res://audio/sfx/shutter.wav" type="AudioStream" id=5]
[ext_resource path="res://fonts/droid-sans/DroidSans.ttf" type="DynamicFontData" id=7]
[ext_resource path="res://shaders/hue_shift.shader" type="Shader" id=8]

[sub_resource type="GDScript" id=1]
script/source = "extends Control

var message_display
export var message_speed = 0.02

var timer
var typing_finsihed = true
var tween
var tweening_finished = true
var visibility
var state = 'disabled' # 'disabled', 'typing', 'waiting_input', 'standby'

export var click_sound = true

signal finished_typing
signal finished_tweening
signal clicked
signal next
signal hover_on
signal hover_off

func _ready():
	self.timer = $Timer
	self.tween = $Tween
	
	self.message_display = $ClickableArea/Message
	self.message_display.text = \"\"
	
	self.create_background()
	self.create_nameplate()
	
	self.visibility = true if (self.modulate.a == 1) else false
	self.state = 'standby'

func create_background():
	var column = 0; var i = 0
	var diamond_sprite
	var size = 81.921 # 0.16 scale
	var starting_x = size / 4
	var x; var y
	while column < 47:
		while i < 4:
			diamond_sprite = Sprite.new()
			diamond_sprite.texture = load(\"res://images/ui/diamond.png\")
			diamond_sprite.scale = Vector2(0.16, 0.16)
			diamond_sprite.centered = true
			
			x = (column * (size / 2)) + starting_x
			if (column % 2 == 0):
				y = i * size
			else:
				y = i * size + (size / 2 * -1)
			diamond_sprite.position = Vector2(x, y)
			diamond_sprite.modulate.a = 0
			
			$ClickableArea/Background/Diamonds.add_child(diamond_sprite)
			i += 1
		column += 1
		i = 0

func create_nameplate():
	var column = 0
	var diamond_sprite
	var size = 81.921 # 0.16 scale
	var starting_x = size / 4
	var x; var y
	while column < 5:
		diamond_sprite = Sprite.new()
		if (column % 2 == 0):
			diamond_sprite.texture = load(\"res://images/ui/diamond.png\")
			y = 0
		else:
			diamond_sprite.texture = load(\"res://images/ui/diamond-bhalf.png\")
			y = 0 - (size / 2)
		diamond_sprite.scale = Vector2(0.16, 0.16)
		diamond_sprite.centered = true
		
		x = (column * (size / 2)) + 0
		diamond_sprite.position = Vector2(x, y)
		diamond_sprite.modulate.a = 1
		
		$ClickableArea/Nameplate/Diamonds.add_child(diamond_sprite)
		column += 1

func toggle_diamonds_visibility(show, animate):
	if (animate):
		var counter = 0
		for diamond in $ClickableArea/Background/Diamonds.get_children():
			$ClickableArea/Background/Tween.interpolate_property(diamond, \"modulate:a\", 0 if show else 1, 1 if show else 0, 0.1, Tween.TRANS_LINEAR, Tween.EASE_IN, counter * 0.005)
			counter += 1
		$ClickableArea/Background/Tween.start()
	else:
		for diamond in $ClickableArea/Background/Diamonds.get_children():
			diamond.modulate.a = 0

func _on_diamond_tween_completed():
	pass

func show_text(text, options: Dictionary = {}):
	self.state = 'typing'
	self.message_display.text = text
	self.message_display.visible_characters = 0
	self.typing_finsihed = false
	$ClickableArea/NextCaret.visible = false
	if (options.has('nameplate')):
		var hue = 0
		if (options['nameplate'].has('hue')):
			hue = options['nameplate']['hue']
		self._show_nameplate(options['nameplate']['name'], hue)
	else:
		self._hide_nameplate()
	timer.start(self.message_speed)

func _type_text_character():
	self.message_display.visible_characters += 1
	if (self.message_display.visible_characters >= self.message_display.text.length()):
		self._end_typing()

func _show_nameplate(name, hue: float = 0):
	$ClickableArea/Nameplate/NameText.text = name
	$ClickableArea/Nameplate.get_material().set_shader_param('shift_amount', hue)
	$ClickableArea/Nameplate.visible = true

func _hide_nameplate():
	$ClickableArea/Nameplate.visible = false

func _skip_typing():
	self.timer.stop()
	self.message_display.visible_characters = self.message_display.text.length()
	self._end_typing()

func _end_typing():
	self.timer.stop()
	self.typing_finsihed = true
	self.state = 'waiting_input'
	$ClickableArea/NextCaret.visible = true
	emit_signal('finished_typing')

func hide(animate: bool = true):
	self.toggle_visibility(false, animate)

func show(animate: bool = true):
	self.toggle_visibility(true, animate)

func toggle_visibility(show: bool, animate: bool = true):
	self._hide_nameplate()
	$ClickableArea/NextCaret.visible = false
	if show: self.visible = true
	if (animate):
		self.tween.interpolate_property(self, \"modulate:a\", (0 if show else 1), (1 if show else 0), 1, Tween.TRANS_LINEAR, Tween.EASE_IN_OUT)
		self.toggle_diamonds_visibility(show, animate)
		self.tweening_finished = false
		self.tween.start()
	else:
		self.modulate.a = (1 if show else 0)
		self.toggle_diamonds_visibility(show, animate)
		self._end_tween()

func _skip_tween():
	self.tween.playback_speed = 10.0

func _end_tween():
	self.tween.playback_speed = 1.0
	self.tween.remove_all()
	self.tweening_finished = true
	if self.modulate.a == 1: self.state = 'standby'; else: self.state = 'disabled'
	if self.modulate.a == 0: self.visible = false
	emit_signal('finished_tweening')

func _advance():
	if self.typing_finsihed && self.tweening_finished:
		$ClickableArea/NextCaret.visible = false
		self._play_click_sfx()
		emit_signal('next')
		self.state = 'standby'
	else:
		if !self.typing_finsihed:
			self._skip_typing()
		if !self.tweening_finished:
			self._skip_tween()

func _play_click_sfx():
	if (!self.click_sound): return
	if (self.state != 'waiting_input'): return
	$ClickSound.play()

func get_nameplate_hue(name):
	var hue = 0
	match (name):
		\"Yoshiko\": hue = 0.9
		\"Dia\": hue = 0.3
		_: hue = 0
	return hue

func _on_click(viewport, event, shape_idx):
	if (event is InputEventMouseButton):
		if (event.button_index == BUTTON_LEFT and event.pressed):
			emit_signal('clicked')
			self._advance()

func _input(event):
	if event.is_action_pressed(\"ui_accept\"):
		emit_signal('clicked')
		self._advance()

func _on_tween_all_completed():
	self._end_tween() # same procedure anyway

func _on_tween_started(object, key):
	if (object == self && key == ':modulate:a'):
		if (self.visibility == false):
			self.message_display.text = \"\"
			self.message_display.visible_characters = 0

func _on_tween_completed(object, key):
	if (object == self && key == ':modulate:a'):
		self.visibility = true if (self.modulate.a == 1) else false


func _on_ClickableArea_mouse_entered(): emit_signal('hover_on')
func _on_ClickableArea_mouse_exited(): emit_signal('hover_off')
"

[sub_resource type="ShaderMaterial" id=2]
shader = ExtResource( 8 )
shader_param/shift_amount = 0.0

[sub_resource type="DynamicFont" id=3]
size = 36
use_mipmaps = true
use_filter = true
font_data = ExtResource( 3 )

[sub_resource type="DynamicFont" id=4]
size = 36
use_mipmaps = true
use_filter = true
font_data = ExtResource( 2 )
fallback/0 = ExtResource( 7 )

[sub_resource type="AtlasTexture" id=5]
flags = 4
atlas = ExtResource( 4 )
region = Rect2( 0, 0, 256, 256 )

[sub_resource type="AtlasTexture" id=6]
flags = 4
atlas = ExtResource( 4 )
region = Rect2( 0, 256, 256, 256 )

[sub_resource type="AtlasTexture" id=7]
flags = 4
atlas = ExtResource( 4 )
region = Rect2( 0, 512, 256, 256 )

[sub_resource type="AtlasTexture" id=8]
flags = 4
atlas = ExtResource( 4 )
region = Rect2( 0, 768, 256, 256 )

[sub_resource type="AtlasTexture" id=9]
flags = 4
atlas = ExtResource( 4 )
region = Rect2( 0, 1024, 256, 256 )

[sub_resource type="AtlasTexture" id=10]
flags = 4
atlas = ExtResource( 4 )
region = Rect2( 256, 0, 256, 256 )

[sub_resource type="AtlasTexture" id=11]
flags = 4
atlas = ExtResource( 4 )
region = Rect2( 256, 256, 256, 256 )

[sub_resource type="AtlasTexture" id=12]
flags = 4
atlas = ExtResource( 4 )
region = Rect2( 256, 512, 256, 256 )

[sub_resource type="AtlasTexture" id=13]
flags = 4
atlas = ExtResource( 4 )
region = Rect2( 256, 768, 256, 256 )

[sub_resource type="AtlasTexture" id=14]
flags = 4
atlas = ExtResource( 4 )
region = Rect2( 256, 1024, 256, 256 )

[sub_resource type="AtlasTexture" id=15]
flags = 4
atlas = ExtResource( 4 )
region = Rect2( 512, 0, 256, 256 )

[sub_resource type="AtlasTexture" id=16]
flags = 4
atlas = ExtResource( 4 )
region = Rect2( 512, 256, 256, 256 )

[sub_resource type="AtlasTexture" id=17]
flags = 4
atlas = ExtResource( 4 )
region = Rect2( 512, 512, 256, 256 )

[sub_resource type="AtlasTexture" id=18]
flags = 4
atlas = ExtResource( 4 )
region = Rect2( 512, 768, 256, 256 )

[sub_resource type="AtlasTexture" id=19]
flags = 4
atlas = ExtResource( 4 )
region = Rect2( 512, 1024, 256, 256 )

[sub_resource type="SpriteFrames" id=20]
animations = [ {
"frames": [ SubResource( 5 ), SubResource( 6 ), SubResource( 7 ), SubResource( 8 ), SubResource( 9 ), SubResource( 10 ), SubResource( 11 ), SubResource( 12 ), SubResource( 13 ), SubResource( 14 ), SubResource( 15 ), SubResource( 16 ), SubResource( 17 ), SubResource( 18 ), SubResource( 19 ) ],
"loop": true,
"name": "default",
"speed": 10.0
} ]

[sub_resource type="RectangleShape2D" id=21]
extents = Vector2( 960, 147 )

[node name="MessageBox" type="Control"]
mouse_filter = 2
script = SubResource( 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ClickableArea" type="Area2D" parent="."]
position = Vector2( 960, 932 )
gravity_vec = Vector2( 0, 0 )

[node name="Background" type="Sprite" parent="ClickableArea"]

[node name="Polygon2D" type="Polygon2D" parent="ClickableArea/Background"]
color = Color( 0.14902, 0.435294, 0.686275, 0.494118 )
polygon = PoolVector2Array( 900, -130, -900, -130, -960, -80, -960, 200, 960, 200, 960, -80 )

[node name="Diamonds" type="Node2D" parent="ClickableArea/Background"]
modulate = Color( 1, 1, 1, 0.784314 )
position = Vector2( -960, -74 )

[node name="Tween" type="Tween" parent="ClickableArea/Background"]

[node name="Nameplate" type="Sprite" parent="ClickableArea"]
material = SubResource( 2 )
position = Vector2( -485.87, -116.327 )

[node name="Diamonds" type="Node2D" parent="ClickableArea/Nameplate"]
modulate = Color( 1, 1, 1, 0.784314 )
position = Vector2( -208, -42.5267 )

[node name="NameText" type="RichTextLabel" parent="ClickableArea/Nameplate"]
margin_left = -197.014
margin_top = -69.7109
margin_right = 258.986
margin_bottom = -17.7109
mouse_filter = 2
custom_fonts/bold_font = SubResource( 3 )
custom_fonts/normal_font = SubResource( 4 )
custom_colors/default_color = Color( 1, 1, 1, 1 )
custom_colors/font_color_shadow = Color( 0.101961, 0.0705882, 0.345098, 0.447059 )
custom_constants/shadow_offset_x = 3
custom_constants/shadow_offset_y = 3
bbcode_enabled = true
meta_underlined = false
scroll_active = false
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Message" type="RichTextLabel" parent="ClickableArea"]
margin_left = -705.0
margin_top = -74.0
margin_right = 704.0
margin_bottom = 108.0
mouse_filter = 2
custom_fonts/bold_font = SubResource( 3 )
custom_fonts/normal_font = SubResource( 4 )
custom_colors/default_color = Color( 1, 1, 1, 1 )
custom_colors/font_color_shadow = Color( 0.101961, 0.0705882, 0.345098, 0.447059 )
custom_constants/shadow_offset_x = 3
custom_constants/shadow_offset_y = 3
bbcode_enabled = true
meta_underlined = false
scroll_active = false
__meta__ = {
"_edit_lock_": true,
"_edit_use_anchors_": false
}

[node name="NextCaret" type="AnimatedSprite" parent="ClickableArea"]
position = Vector2( 728.382, 68.6981 )
scale = Vector2( 0.186289, 0.186289 )
frames = SubResource( 20 )
frame = 5
playing = true
__meta__ = {
"_edit_lock_": true
}

[node name="CollisionShape2D" type="CollisionShape2D" parent="ClickableArea"]
visible = false
shape = SubResource( 21 )
one_way_collision = true
__meta__ = {
"_edit_lock_": true
}

[node name="Tween" type="Tween" parent="."]

[node name="Timer" type="Timer" parent="."]

[node name="ClickSound" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 5 )
[connection signal="input_event" from="ClickableArea" to="." method="_on_click"]
[connection signal="mouse_entered" from="ClickableArea" to="." method="_on_ClickableArea_mouse_entered"]
[connection signal="mouse_exited" from="ClickableArea" to="." method="_on_ClickableArea_mouse_exited"]
[connection signal="tween_all_completed" from="ClickableArea/Background/Tween" to="." method="_on_diamond_tween_completed"]
[connection signal="tween_all_completed" from="Tween" to="." method="_on_tween_all_completed"]
[connection signal="tween_completed" from="Tween" to="." method="_on_tween_completed"]
[connection signal="tween_started" from="Tween" to="." method="_on_tween_started"]
[connection signal="timeout" from="Timer" to="." method="_type_text_character"]
