[gd_scene load_steps=8 format=2]

[ext_resource path="res://images/ui/textbox.png" type="Texture" id=1]
[ext_resource path="res://fonts/montreal/Montreal-Regular.ttf" type="DynamicFontData" id=2]
[ext_resource path="res://fonts/montreal/Montreal-Bold.ttf" type="DynamicFontData" id=3]

[sub_resource type="GDScript" id=1]
script/source = "extends Control

var message_display
var message_speed = 0.05

var timer
var typing_finsihed = true

var tween
var tweening_finished = true
var visibility

signal finished_typing
signal finished_tweening
signal clicked
signal next

func _ready():
	self.timer = $Timer
	self.tween = $Tween
	
	self.message_display = $ClickableArea/Message
	self.message_display.text = \"\"
	
	self.visibility = true if (self.modulate.a == 1) else false

func show_text(text, options = []):
	self.message_display.text = text
	self.message_display.visible_characters = 0
	self.typing_finsihed = false
	timer.start(self.message_speed)

func _type_text_character():
	self.message_display.visible_characters += 1
	if (self.message_display.visible_characters >= self.message_display.text.length()):
		self._end_typing()

func _skip_typing():
	self.timer.stop()
	self.message_display.visible_characters = self.message_display.text.length()
	self._end_typing()

func _end_typing():
	self.typing_finsihed = true
	emit_signal('finished_typing')

func hide(animate: bool = true):
	self.toggle_visibility(false, animate)

func show(animate: bool = true):
	self.toggle_visibility(true, animate)

func toggle_visibility(show: bool, animate: bool = true):
	if (animate):
		self.tween.interpolate_property(self, \"modulate:a\", (0 if show else 1), (1 if show else 0), 1, Tween.TRANS_LINEAR, Tween.EASE_IN)
		self.tweening_finished = false
		self.tween.start()
	else:
		self.modulate.a = (1 if show else 0)
		self._end_tween()

func _skip_tween():
	self.tween.playback_speed = 10.0

func _end_tween():
	self.tween.playback_speed = 1.0
	self.tween.remove_all()
	self.tweening_finished = true
	emit_signal('finished_tweening')

func _advance():
	if self.typing_finsihed && self.tweening_finished:
		emit_signal('next')
	else:
		if !self.typing_finsihed:
			self._skip_typing()
		if !self.tweening_finished:
			self._skip_tween()

func _on_click(viewport, event, shape_idx):
	if (event is InputEventMouseButton):
		if (event.button_index == BUTTON_LEFT and event.pressed):
			emit_signal('clicked')
			self._advance()

func _on_tween_all_completed():
	self._end_tween() # same procedure anyway

func _on_tween_started(object, key):
	if (object == self && key == ':modulate:a'):
		if (self.visibility == false):
			self.message_display.text = \"\"
			self.message_display.visible_characters = 0

func _on_tween_completed(object, key):
	if (object == self && key == ':modulate:a'):
		self.visibility = true if (self.modulate.a == 1) else false
"

[sub_resource type="DynamicFont" id=2]
size = 36
use_mipmaps = true
use_filter = true
font_data = ExtResource( 3 )

[sub_resource type="DynamicFont" id=3]
size = 36
use_mipmaps = true
use_filter = true
font_data = ExtResource( 2 )

[sub_resource type="RectangleShape2D" id=4]
extents = Vector2( 960, 147 )

[node name="MessageBox" type="Control"]
mouse_filter = 2
script = SubResource( 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ClickableArea" type="Area2D" parent="."]
position = Vector2( 960, 932 )
gravity_vec = Vector2( 0, 0 )

[node name="Background" type="Sprite" parent="ClickableArea"]
texture = ExtResource( 1 )
__meta__ = {
"_edit_lock_": true
}

[node name="Message" type="RichTextLabel" parent="ClickableArea"]
margin_left = -786.0
margin_top = -74.0
margin_right = 786.0
margin_bottom = 108.0
mouse_filter = 2
custom_fonts/bold_font = SubResource( 2 )
custom_fonts/normal_font = SubResource( 3 )
custom_colors/default_color = Color( 0, 0, 0, 1 )
bbcode_enabled = true
meta_underlined = false
scroll_active = false
__meta__ = {
"_edit_lock_": true,
"_edit_use_anchors_": false
}

[node name="CollisionShape2D" type="CollisionShape2D" parent="ClickableArea"]
shape = SubResource( 4 )
one_way_collision = true
__meta__ = {
"_edit_lock_": true
}

[node name="Tween" type="Tween" parent="."]

[node name="Timer" type="Timer" parent="."]
[connection signal="input_event" from="ClickableArea" to="." method="_on_click"]
[connection signal="tween_all_completed" from="Tween" to="." method="_on_tween_all_completed"]
[connection signal="tween_completed" from="Tween" to="." method="_on_tween_completed"]
[connection signal="tween_started" from="Tween" to="." method="_on_tween_started"]
[connection signal="timeout" from="Timer" to="." method="_type_text_character"]
